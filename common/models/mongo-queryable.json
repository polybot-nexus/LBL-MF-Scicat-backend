{
    "name": "MongoQueryableModel",
    "description": "This is the base model for all models which want to use the fullQuery and fullFacet API calls, which depend on Mongo Query functionality.",
    "base": "PersistedModel",
    "options": {
        "validateUpsert": true
    },
    "mixins": {
        "TimeStamp": {
            "createdAt": "createdAt",
            "updatedAt": "updatedAt",
            "required": false,
            "validateUpsert": true,
            "silenceWarnings": false
        }
    },
    "properties": {
        "createdBy": {
            "type": "string",
            "index": true,
            "description": "Functional or user account name who created this instance"
        },
        "updatedBy": {
            "type": "string",
            "description": "Functional or user account name who last updated this instance"
        }
    },
    "validations": [],
    "relations": {},
    "acls": [],
    "methods": {
        "fullfacet": {
            "accepts": [{
                    "arg": "fields",
                    "type": "object",
                    "description": "Define the filter conditions by specifying the name and values of fields. There ia also support for a `text` search to look for strngs anywhere in the dataset."
                },
                {
                    "arg": "facets",
                    "type": "array",
                    "description": "Defines list of field names, for which facet counts should be calculated"
                },
                {
                    "arg": "options",
                    "type": "object",
                    "http": "optionsFromRequest"
                }
            ],
            "returns": {
                "root": true
            },
            "description": "Return facet counts relevant for the given selected subset of datasets. ",
            "http": {
                "path": "/fullfacet",
                "verb": "get"
            }
        },
        "fullquery": {
            "accepts": [{
                    "arg": "fields",
                    "type": "object",
                    "description": "Define the filter conditions by specifying the name of values of fields requested. There ia also support for a `text` search to look for strings anywhere in the dataset. Skip and limit parameters allow for paging."
                },
                {
                    "arg": "limits",
                    "type": "object",
                    "description": "Define further query parameters like skip, limit, order"
                },
                {
                    "arg": "options",
                    "type": "object",
                    "http": "optionsFromRequest"
                }
            ],
            "returns": {
                "root": true
            },
            "description": "Return datasets fulfilling complex filter conditions, including from fields of joined models.",
            "http": {
                "path": "/fullquery",
                "verb": "get"
            }
        }
    }
}
